<?php

  /**
   * Set path to the module
   */
  define('MODULE_PATH', drupal_get_path('module', 'ymaps_routes'));

  /**
   * Group of constants that sets module variables names
   */
  define('VARIABLE_API_KEY', 'ymaps-routes-api-key');
  define('VARIABLE_CONTENT_TYPES', 'ymaps-routes-content-types');
  define('VARIABLE_LINE_WIDTH', 'ymaps-routes-line-width');
  define('VARIABLE_LINE_COLOR', 'ymaps-routes-line-color');
  define('VARIABLE_MAP_CONTROLS', 'ymaps-routes-map-controls');

  /**
   * Group of constants that sets default values of module variables
   */
  define('API_KEY_DEFAULT', '');
  define('LINE_WIDTH_DEFAULT', '3');
  define('LINE_COLOR_DEFAULT', 'ff0000');

  /**
   * Group of constants that sets module variables names for block
   */
  define('BLOCK_WIDTH', 'ymaps-routes-block-width');
  define('BLOCK_HEIGHT', 'ymaps-routes-block-height');
  define('BLOCK_MAP_CONTROLS', 'ymaps-routes-block-map-controls');

  /**
   * Group of constants that sets default values of module block variables
   */
  define('BLOCK_WIDTH_DEFAULT', '300');
  define('BLOCK_HEIGHT_DEFAULT', '300');

  /**
   * Construct value for variable_set() function from checkboxes values
   *
   * @param array $array of checkboxes values that submitted from form
   * @return array value for variable_set() function
   */
  function _ymaps_routes_construct_variable($array) {
    $result = array();
    foreach($array as $key => $value)
      if($value)
        $result[] = $key;

    return $result;
  }

  /**
   * Load concrete route from database
   *
   * @return object|bool route object or FALSE
   */
  function _ymaps_routes_get_route() {
    $query = db_query("SELECT * FROM {ymaps_routes} WHERE `nid` = %d", arg(1));

    return arg(0)=='node' && db_affected_rows() ? db_fetch_object($query) : false;
  }

  /**
   * Get markers from markers library in database
   *
   * @return array of markers ids and images
   */
  function _ymaps_routes_get_markers() {
    $markers_query = db_query("SELECT {files}.`filepath`, {ymaps_routes_markers}.`mid` FROM {files} INNER JOIN {ymaps_routes_markers} ON {ymaps_routes_markers}.`fid` = {files}.`fid`");

    $markers = array();
    while($markers_result = db_fetch_object($markers_query))
      $markers[$markers_result->mid] = theme_image($markers_result->filepath);

    return $markers;
  }

  /**
   * Implementation of hook_menu()
   *
   * @return array of themnig rules
   */
  function ymaps_routes_theme() {
    return array(
      'ymaps_routes_block' => array(
        'arguments' => array(
          'block_size' => NULL
        ),
        'template' => 'ymaps-routes-block'
      )
    );
  }

  /**
   * Implementation of hook_init()
   *
   * @return void
   */
  function ymaps_routes_init() {
    drupal_add_css(MODULE_PATH.'/css/map.css');
    drupal_add_js('document.write("<" + "script type=\'text/javascript\' src=\'http://api-maps.yandex.ru/1.1/index.xml?key='.variable_get('ymaps-routes-api-key', null).'\'><" + "/script>");', 'inline');
    drupal_add_js(MODULE_PATH.'/js/map.js');
    drupal_add_js(MODULE_PATH.'/js/json2.js');
    drupal_add_js(MODULE_PATH.'/js/jquery.slowEach.js');
    drupal_add_js(array('ymaps_routes' => array('is_admin' => false)), 'setting');
  }

  /**
   * Implementation of hook_perm()
   *
   * @return array
   */
  function ymaps_routes_perm() {
    return array('access ymaps-routes settings', 'access ymaps-routes content');
  }

  /**
   * Implementation of hook_menu()
   *
   * @return array
   */
  function ymaps_routes_menu() {
    $items['admin/settings/ymaps_routes'] = array(
        'title' => 'Ymaps routes settings',
        'description' => '',
        'page callback' => 'ymaps_routes_admin_page',
        'access arguments' => array('access ymaps-routes settings'),
        'file' => 'ymaps_routes.admin.inc.php'
    );
    $items['admin/settings/ymaps_routes/routes'] = array(
      'title' => 'Routes settings',
      'description' => 'This page allows you to setup Ymaps routes module defaults',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ymaps_routes_settings_form'),
      'access arguments' => array('access ymaps-routes settings'),
      'file' => 'ymaps_routes.admin.inc.php',
      'weight' => -10
    );
    $items['admin/settings/ymaps_routes/markers'] = array(
      'title' => 'Markers library',
      'description' => 'This page allows you to manage Ymaps routes module uploaded markers',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ymaps_routes_markers_form'),
      'access arguments' => array('access ymaps-routes settings'),
      'file' => 'ymaps_routes.admin.inc.php',
      'weight' => 0
    );

    return $items;
  }

  /**
   * Implementation of hook_form_alter()
   *
   * @param array $form form array
   * @param array $form_state form state array
   * @param string $form_id form id
   * @return void
   */
  function ymaps_routes_form_alter(&$form, &$form_state, $form_id) {
    if(in_array($form['type']['#value'], variable_get(VARIABLE_CONTENT_TYPES, array())) && user_access('access ymaps-routes content')) {
      $route = _ymaps_routes_get_route();

      $form['#attributes'] = array('enctype' => "multipart/form-data");

      $form['ymaps-routes'] = array(
        '#type' => 'fieldset',
        '#title' => t('Ymaps routes'),
        '#weight' => -1
      );
      
      $form['ymaps-routes']['route-line-settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Route line settings'),
        '#description' => t('Line settings for this route. <b>This values will override defaults.</b>'),
        '#collapsible' => true,
        '#collapsed' => true
      );
      $form['ymaps-routes']['route-line-settings']['line_width'] = array(
        '#type' => 'select',
        '#title' => t('Line width in pixels'),
        '#options' => drupal_map_assoc(array('', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)),
        '#default_value' => $route->line_width ? $route->line_width : null
      );
      $form['ymaps-routes']['route-line-settings']['line_color'] = array(
        '#type' => 'textfield',
        '#title' => t('Line color in HEX'),
        '#maxlength' => 6,
        '#size' => 6,
        '#field_prefix' => '#',
        '#default_value' => $route->line_color ? $route->line_color : null,
        '#attributes' => array('style' => 'display:inline;width:auto;')
      );

      $form['ymaps-routes']['point-types'] = array(
        '#type' => 'fieldset',
        '#title' => t('Point type'),
        '#collapsible' => true,
        '#collapsed' => true
      );
      $form['ymaps-routes']['point-types']['point-type'] = array(
        '#type' => 'radios',
        '#title' => '',
        '#options' => array(t('Edge point'), t('Stop point')),
        '#default_value' => 0
      );

      $form['ymaps-routes']['clear-map'] = array(
        '#type' => 'button',
        '#value' => t('Clear map')
      );
      $form['ymaps-routes']['clear-map']['#suffix'] = '
         <span id="edit-waiting">
          '.t('The route is processing. Please, wait...').'
        </span>
      ';

      $form['ymaps-routes']['markers'] = array(
        '#type' => 'fieldset',
        '#title' => t('Markers')
      );
      $form['ymaps-routes']['markers']['markers_list'] = array(
        '#type' => 'radios',
        '#options' => _ymaps_routes_get_markers(),
        '#default_value' => $route->mid ? $route->mid : 0,
        '#prefix' => '<div class="container-inline">',
        '#suffix' => '</div>'
      );
      $form['ymaps-routes']['markers']['markers_file'] = array(
        '#type' => 'file',
        '#title' => t('Upload new marker')
      );

      $form['ymaps-routes']['polyline'] = array(
        '#type' => 'textarea',
        '#resizable' => false,
        '#attributes' => array('style' => 'display:none;'),
        '#default_value' => $route->json_value ? $route->json_value : 0
      );
      $form['ymaps-routes']['polyline']['#suffix'] = '
        <div id="YMaps_Map" class="admin"></div>
      ';

      $form['#after_build'][] = 'ymaps_routes_form_after_build';
    }
  }
  /**
   * Route form after build manipulation
   *
   * @param array $form from array
   * @param array $from_state form state array
   * @return array form array
   */
  function ymaps_routes_form_after_build($form, &$from_state) {
    drupal_add_css(MODULE_PATH.'/css/admin.css');
    drupal_add_js(MODULE_PATH.'/js/admin.js');
    drupal_add_js(array('ymaps_routes' => array('is_admin' => true)), 'setting');
    drupal_add_js(array(
      'ymaps_routes' => array(
          'map_controls' => variable_get(VARIABLE_MAP_CONTROLS, array('TYPE_CONTROL', 'ZOOM', 'MINI_MAP', 'SEARCH_CONTROL'))
      )
    ), 'setting');

    $form['#validate'][] = 'ymaps_routes_form_validate';
    $form['#submit'][] = 'ymaps_routes_form_submit';

    return $form;
  }
  /**
   * Implementation of _form_validate()
   *
   * @param array $elements form elements
   * @param array $form_state form state array
   * @return void
   */
  function ymaps_routes_form_validate($elements, &$form_state) {
    if(!empty($form_state['values']['line_color']) && !preg_match('/^[a-z0-9]+$/i', $form_state['values']['line_color']))
      form_set_error('line_color', t('Value of field <em><b>Line color</b></em> should contains only alphabetic and numbers'));

    //@todo Добавить валидаторы веса и размера
    $validators = array(
      'file_validate_is_image' => array()
    );
    $dir = file_directory_path().'/ymaps_routes';
    if(file_check_directory($dir, 1)) {
      $file = file_save_upload('markers_file', $validators, $dir);

      if($file) {
        $form_state['values']['markers_file'] = $file;
      }
    }
  }
  /**
   * Implementation of _form_submit()
   *
   * @param array $form form array
   * @param array $form_state form state array
   * @return void
   */
  function ymaps_routes_form_submit($form, &$form_state) {
    $file = $form_state['values']['markers_file'];
    if(!empty($file)) {
      file_set_status($file, FILE_STATUS_PERMANENT);

      $marker = array('fid' => $file->fid);
      drupal_write_record('ymaps_routes_markers', $marker);

      $form_state['values']['markers_file'] = $file->fid;
    }
  }

  /**
   * Implementation of hook_nodeapi()
   *
   * @param object $node node object
   * @param string $op node operation
   * @param null $a3
   * @param null $a4
   * @return void
   */
  function ymaps_routes_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
    if(in_array($node->type, variable_get(VARIABLE_CONTENT_TYPES, array()))) {
      
      $route = array(
        'nid' => $node->nid,
        'mid' => $node->markers_file ? db_last_insert_id('ymaps_routes_markers', 'mid') : $node->markers_list,
        'line_width' => $node->line_width ? $node->line_width : 0,
        'line_color' => $node->line_color ? $node->line_color : 0,
        'json_value' => $node->polyline ? $node->polyline : 0
      );

      switch($op) {
        case 'insert':
          drupal_write_record('ymaps_routes', $route);
          break;
        case 'update':
          drupal_write_record('ymaps_routes', $route, 'nid');
          break;
        case 'delete':
          db_query("DELETE FROM {ymaps_routes} WHERE `nid` = %d", $node->nid);
          break;
      }
    }
  }

  /**
   * Implementation of hook_block()
   *
   * @param string $op block operation
   * @param int $delta block delta value
   * @param array $edit block parameters
   * @return array
   */
  function ymaps_routes_block($op = 'list', $delta = 0, $edit = array()) {
    switch($op) {
      case 'list':
        $block[0] = array(
          'info' => t('Ymaps routes block')
        );

        return $block;
        break;
      case 'view':
        if(arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)) {
          $route = _ymaps_routes_get_route();

          if($route && $route->json_value) {
            drupal_add_js(array(
              'ymaps_routes' => array(
                'map_controls' => variable_get(BLOCK_MAP_CONTROLS, array('TYPE_CONTROL', 'ZOOM', 'SCALE_LINE'))
              )
            ), 'setting');
            drupal_add_js(array(
               'ymaps_routes' => array(
                 'line_width' => $route->line_width ? $route->line_width : variable_get(VARIABLE_LINE_WIDTH, LINE_WIDTH_DEFAULT))
            ), 'setting');
            drupal_add_js(array(
               'ymaps_routes' => array(
                 'line_color' => $route->line_color ? $route->line_color : variable_get(VARIABLE_LINE_COLOR, LINE_COLOR_DEFAULT))
            ), 'setting');
            drupal_add_js(array('ymaps_routes' => array('json_value' => $route->json_value)), 'setting');

            if($route->mid) {
              
              $marker = db_fetch_object(db_query("SELECT
                                                    {files}.`filepath`
                                                  FROM
                                                    {files}
                                                  INNER JOIN {ymaps_routes_markers} ON {ymaps_routes_markers}.`fid` = {files}.`fid`
                                                  WHERE
                                                    {ymaps_routes_markers}.`mid` = %d",
                                        $route->mid));

              if(db_affected_rows()) {
                $fileinfo = image_get_info($marker->filepath);

                drupal_add_js(array(
                  'ymaps_routes' => array(
                    'marker_style' => array(
                      'width' => $fileinfo['width'],
                      'height' => $fileinfo['height'],
                      'filepath' => $marker->filepath
                    )
                  )
                ), 'setting');
              }
              
            }
            drupal_add_js(MODULE_PATH.'/js/user.js');

            $block['subject'] = t('Ymaps routes');
            $block['content'] = theme('ymaps_routes_block', array('height' => variable_get(BLOCK_HEIGHT, BLOCK_HEIGHT_DEFAULT), 'width' => variable_get(BLOCK_WIDTH, BLOCK_WIDTH_DEFAULT)));
            
          }

          return $block;
        }
        break;
        case 'configure':
          $form = array();

          $form['ymaps-routes-block-settings'] = array(
            '#type' => 'fieldset',
            '#title' => t('Ymaps routes block settings'),
            '#collapsible' => true
          );
          $form['ymaps-routes-block-settings']['block-width'] = array(
            '#type' => 'textfield',
            '#title' => t('Block width in pixels'),
            '#default_value' => variable_get(BLOCK_WIDTH, BLOCK_WIDTH_DEFAULT),
            '#size' => 3,
            '#maxlength' => 4,
            '#field_suffix' => 'px'
          );
          $form['ymaps-routes-block-settings']['block-height'] = array(
            '#type' => 'textfield',
            '#title' => t('Block height in pixels'),
            '#default_value' => variable_get(BLOCK_HEIGHT, BLOCK_HEIGHT_DEFAULT),
            '#size' => 3,
            '#maxlength' => 4,
            '#field_suffix' => 'px'
          );

          $form['ymaps-routes-block-settings']['map-controls'] = array(
            '#type' => 'fieldset',
            '#title' => t('Map controls visibility')
          );
          $form['ymaps-routes-block-settings']['map-controls']['controls-value'] = array(
            '#type' => 'checkboxes',
            '#options' => array(
              'TYPE_CONTROL' => 'Map type control',
              'TOOL_BAR' => 'Tool bar control',
              'ZOOM' => 'Map zoom control',
              'MINI_MAP' => 'Mini map control',
              'SCALE_LINE' => 'Scale line control'
            ),
            '#default_value' => variable_get(BLOCK_MAP_CONTROLS, array('TYPE_CONTROL', 'ZOOM', 'SCALE_LINE'))
          );

          return $form;
        break;
        case 'save':
          variable_set(BLOCK_WIDTH, $edit['block-width']);
          variable_set(BLOCK_HEIGHT, $edit['block-height']);
          
          variable_set(BLOCK_MAP_CONTROLS, _ymaps_routes_construct_variable($edit['controls-value']));
        break;
    }
  }
